" Vim build configure options
"./configure --enable-rubyinterp --prefix=/usr/local/vim/vim73 --with-features=big
" To install vundle
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
"
" we're running Vim, not Vi!
set  nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'Lokaltog/vim-powerline'
Bundle 'gmarik/vundle'
Bundle 'kana/vim-textobj-user'
Bundle 'kien/ctrlp.vim'
Bundle 'nanotech/jellybeans.vim'
Bundle 'nelstrom/vim-textobj-rubyblock'
Bundle 'oscarh/vimerl'
Bundle 'pix/vim-align'
Bundle 'railscasts'
Bundle 'ricardovaleriano/vim-github-theme'
Bundle 'scrooloose/nerdtree'
Bundle 'statianzo/vim-jade'
Bundle 'tomtom/tcomment_vim'
Bundle 'corntrace/bufexplorer'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-ragtag'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-vividchalk'
Bundle 'vim-ruby/vim-ruby'
Bundle 'vividchalk.vim'
Bundle 'endwise.vim'
Bundle 'surround.vim'
Bundle 'kaichen/vim-snipmate-ruby-snippets'
Bundle 'scrooloose/syntastic'
Bundle 'kchmck/vim-coffee-script'
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "tpope/vim-rails"
Bundle "altercation/vim-colors-solarized"
Bundle "nathanaelkane/vim-indent-guides"


" Set colors to 256
set t_Co=256
let &t_Co=256
let g:solarized_termcolors=256

" fires filetype event with sets syntax etc.
filetype plugin indent on
syntax on

" number of spaces to use for each step of autoindent
set  shiftwidth=2

" number of spaces that a tab counts as
set  softtabstop=2
set  tabstop=2
set  expandtab

let g:Powerline_symbols = 'fancy'

autocmd FileType html setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType ruby setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType erlang setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2

au BufNewFile,BufRead *.jade set filetype=jade
au BufNewFile,BufRead *.js set filetype=javascript
au BufNewFile,BufRead *.pp set filetype=ruby

runtime macros/matchit.vim

" show whitespace
set list

" Show tabs as >---
set listchars=tab:>-

" copy indent from current line when starting a new line
set  autoindent

" change file if it has been modified outside of vim set  autoread
" line numbers
set number

" show the cursor position all the time
set ruler

" hide existing buffers even if they contain changes
set  hidden

" Remember more commands and search history
set history=1000

" no backups or swap files
set  nobackup
set  nowritebackup
set  noswapfile
set  autoread

" highlight search
set  hlsearch

" Disable audible and visual bell
set visualbell t_vb=

" incremental search, search as you type
set incsearch
" Wrap search from start
set wrapscan
" ignore case is search and override the 'ignorecase' option if the search
" pattern contains uppercase characters
set smartcase ignorecase

"  Set shortest completion on file finding
set wildmode=longest,list
" set iskeyword-=_

" set clipboard=unnamed

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Do not wrap text bigger than the screen
" set textwidth=78

"make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

cabbr wp call Wp()
fun! Wp()
  set lbr
  colorscheme grblight
  set guifont=Inconsolata:h28
  nnoremap j gj
  nnoremap k gk
  nnoremap 0 g0
  nnoremap $ g$
  set nonumber
  set spell spelllang=en_gb
  set formatprg=par
  set textwidth=60
endfu

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" show partial command in last line of editor
set showcmd

" minimal number of screen lines to keep above and below the cursor.
set scrolloff=15

" highligh screen line
set  cursorline

" always show status line
set laststatus=2

" show command
set showcmd

" change vim map key
let mapleader = ","

"  Remove trailing whitespace on save
autocmd  BufRead *.feature set filetype=ruby
autocmd  BufWritePre * :%s/\s\+$//e

"--- mappings ---
"-----------------------------------------------

" Easy window navigation
map <C-h> <C-w>h
map <C-l> <C-w>l
map <C-j> <C-w>j
map <C-k> <C-w>k

" JS Shortcuts
map <Leader>ci iconsole.info('')<Esc>bi
map <C-s> :w<CR>


map gl :tablast<CR>

map <Leader>n :NERDTreeToggle<CR>
map <Leader>gb :GitBlame<CR>

map <leader>b :BufExplorer<CR>

" saving
map <C-b> :w<CR>
imap <C-b> <Esc>:w<CR>i

" Unhighlight search
nmap <silent> ,/ :nohlsearch<CR>

" Make backspace work the way it should
set backspace=2

"  --- Rails ---
imap  <C-l> <Space>=><Space>
"  --- Erlang ---
imap  <C-k> <Space>-><Space>

"  --- Rspec ---
map  <Leader>offs :%s/ it / xit <CR>''?xit<CR>x:w<CR>
map  <Leader>ons :%s/ xit / it /<CR>'':w<CR>

" --- Align ---
nmap <silent> <Leader>ih <ESC>:AlignPush<CR>:AlignCtrl lp1P1l<CR>mmviB:Align =><CR>:AlignPop<CR>'mvaB=
nmap <Leader>fh <ESC>^:s/{/{\r/<CR>:s/}$/\r}<CR>vaB:s/\v,\s*:/,\r:/g<CR><Leader>ih
vmap <silent> <Leader>i= <ESC>:AlignPush<CR>:AlignCtrl lp1P1l<CR>:'<,'>Align =<CR>:AlignPop<CR>
vmap <silent> <Leader>i, <ESC>:AlignPush<CR>:AlignCtrl lp0P1l<CR>:'<,'>Align ,<CR>:AlignPop<CR>

if has("gui_running")
  if has("macunix")
     set guifont=Inconsolata:h18
  elseif has("unix")
     set guifont=Inconsolata:h18
  endif
  set guioptions=egmt
  set guitablabel=%N\ %t\ %M
endif

set background=dark
" solarized options
let g:solarized_termcolors = 256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized

" set nocursorline
hi CursorLine  cterm=NONE ctermbg=234 ctermfg=NONE guibg=NONE guifg=NONE
highlight LineNr ctermfg=235 ctermbg=234

" Enable fancy mode
let g:Powerline_symbols = 'fancy'
let g:ragtag_global_maps = 1

" CMD P the nearest ancestor that contains one of these directories or files: .git .hg .svn .bzr _darcs
let g:ctrlp_working_path_mode = 'r'
set guifont=Monaco:h15
